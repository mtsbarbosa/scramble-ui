{"version":3,"sources":["scramble_ui/store/core.cljs"],"mappings":"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","names":["js/scramble-ui","js/scramble-ui.store","js/scramble-ui.store.core","js/scramble-ui.store.core.messages","scramble-ui.store.core/messages","reagent.core.atom","js/scramble-ui.store.core.result","scramble-ui.store.core/result","js/scramble-ui.store.core.mutations","scramble-ui.store.core/mutations","new-messages","cljs.core/reset!","new-result","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","scramble-ui.store.core/commit","seq15734","G__15735","cljs.core/first","cljs.core/next","self__4851__auto__","key","value","cljs.core.apply","cljs.core.get","js/scramble-ui.store.core.actions","scramble-ui.store.core/actions","messages","scramble_ui.store.core.commit","result","str-1","str-2","store-inst","dispatch","c__11235__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__11236__auto__","switch__11150__auto__","state_15759","state_val_15760","inst_15736","cljs.core.async.impl.ioc-helpers/take!","inst_15738","inst_15739","statearr-15761","statearr-15762","statearr-15763","inst_15741","cljs.core/PersistentVector","inst_15742","inst_15743","inst_15744","statearr-15764","statearr-15765","inst_15753","inst_15754","inst_15755","inst_15756","inst_15757","statearr-15767","cljs.core.async.impl.ioc-helpers/return-chan","inst_15747","inst_15748","statearr-15768","statearr-15769","inst_15751","statearr-15770","statearr-15771","state-machine__11151__auto__","ret-value__11152__auto__","result__11153__auto__","cljs.core/keyword-identical?","ex__11154__auto__","e15772","statearr-15773","cljs.core/seq","statearr-15774","state__11237__auto__","statearr-15775","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","scramble-ui.api.configuration.core/scramble-post!","scramble_ui.translations.t","scramble-ui.store.core/dispatch","seq15776","G__15777","params","js/scramble-ui.store.core.store-instance","scramble-ui.store.core/store-instance"],"sourcesContent":["(ns scramble-ui.store.core\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [reagent.core :as r]\n            [scramble-ui.api.configuration.core :as scramble-api]\n            [cljs.core.async :refer [<!]]\n            [scramble-ui.translations :as i18n]))\n\n(defonce messages (r/atom []))\n(defonce result (r/atom []))\n\n(defonce mutations {\n                    :mutation/messages  (fn [new-messages]\n                                            (reset! messages new-messages))\n                    :mutation/result    (fn [new-result]\n                                            (reset! result new-result))\n                    })\n\n(defn commit\n      \"execute a store mutation change\"\n      [key & value]\n      (apply (get mutations key) value))\n\n(defonce actions {\n                  :action/messages-update   (fn [messages]\n                                             (commit :mutation/messages messages))\n                  :action/result-update     (fn [result]\n                                             (commit :mutation/result result))\n                  :action/post-scramble     (fn [str-1 str-2 store-inst]\n                                                (let [dispatch (:dispatch store-inst)]\n                                                     (go\n                                                      (let [resp      (<! (scramble-api/scramble-post! str-1 str-2))\n                                                           error?     (:error resp)\n                                                           messages   (cond error? [(i18n/t \"fatal\")]\n                                                                            :else (get resp :messages []))\n                                                           result     (get resp :result [])]\n                                                          (dispatch :action/messages-update messages)\n                                                          (dispatch :action/result-update result)))))\n                  })\n\n(defn dispatch\n      \"execute an action\"\n      [key & params]\n      (apply (get actions key) params))\n\n(defonce store-instance\n         {:actions actions,\n          :mutations mutations,\n          :commit commit,\n          :dispatch dispatch})"]}